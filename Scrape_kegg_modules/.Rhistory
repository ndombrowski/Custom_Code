#| message: false
library(ggplot2)
library(plyr)
library(dplyr)
library(ggpubr)
library(plotly)
library(tidyverse)
#set wdir
file_path <- getwd( )
setwd(file_path)
Input = read.table("1_Input/TaxaCounts_KeyTaxa_ArcBacEuk_0.3_clean.txt", sep = "\t", quote = "", header = T)
taxa_mapping = read.table("1_Input/taxa_mapping.txt", sep = "\t", header = T, comment.char = "")
cog_descriptions = read.table("1_Input/cog_definitions", sep = "\t", header = T)
#reorder taxa mapping with a custom order
custom_order = c("Asgard", "Archaea", "Alphaproteobacteria", "Gammaproteobacteria","Campylobacterota", "Cyanobacteria", "Desulfobacterota","Myxococcota", "Chlamydiota", "Bacteria", "Eukaryota")
taxa_mapping$to_add2 = factor(taxa_mapping$to_add, levels = custom_order)
#make strings to order our plots
taxa_mapping_order_temp <- taxa_mapping %>% arrange(to_add2, Domain, Superphylum, Phylum, Class)
SisterTaxa_order = unique(taxa_mapping_order_temp[,c("Group_of_interest")])
color_table = unique(taxa_mapping[,c("Group_of_interest", "Hexcode")])
head(color_table)
#Add cog category
Input2 = merge(Input, cog_descriptions, by = "Pathway", all.x = T)
#If pathway info missing, replace NA with unknown
Input2$Pathway_desc[is.na(Input2$Pathway_desc)] <- "Function_unknown"
#if no lower pathway into, replace with `not in pathway`
Input2$Pathway_lower2 <- gsub("(^)-", "not_in_pathway", Input2$Pathway_lower)
#head(unique(Input2[,c("Pathway_lower2")]))
#add in a column to calculate counts
Input2$Counts <- 1
#add in higher level tax and clean headers
Input2 = merge(Input2, unique(taxa_mapping[,c("Group_of_interest", "to_add")]), by = "Group_of_interest", all.x = T)
names(Input2)[names(Input2) == "to_add"] <-"GoI_higher_rank"
Input2 = merge(Input2, unique(taxa_mapping[,c("Group_of_interest", "to_add")]), by.x = "Sister_taxa", by.y = "Group_of_interest", all.x = T)
names(Input2)[names(Input2) == "to_add"] <-"Sister_higher_rank"
#subset input data for euk as group of interest
Input2_euks = Input2[Input2$GoI_higher_rank == 'Eukaryota',]
#remove self hits
Input2_euks = Input2_euks[Input2_euks$Sister_higher_rank != 'Eukaryota',]
#summarize the sister groups per goi
GoI_counts = ddply(Input2,.(Pathway_desc, GoI_higher_rank, Sister_taxa, Sister_higher_rank), summarize, GoI_Count = sum(Counts))
#only keep eukaryotes as group of interest
GoI_Eukcounts = GoI_counts[GoI_counts$GoI_higher_rank == 'Eukaryota',]
#remove self hits
GoI_Eukcounts2 = GoI_Eukcounts[GoI_Eukcounts$Sister_higher_rank != 'Eukaryota',]
#calculate the total counts per category
TotalCountsperCat = ddply(GoI_Eukcounts2,.(Pathway_desc), summarize, TotalCount = sum(GoI_Count))
#add total counts to our df
GoI_Eukcounts_norm = merge(GoI_Eukcounts2, TotalCountsperCat, by = "Pathway_desc", all.x = T)
GoI_Eukcounts_norm$norm = GoI_Eukcounts_norm$GoI_Count/GoI_Eukcounts_norm$TotalCount*100
#control total counts
Total_PerCat<- unique(GoI_Eukcounts_norm[,c("Pathway_desc", "TotalCount")]) %>%
group_by(Pathway_desc) %>%
summarise(total=sum(TotalCount))
#summarize the sister groups per goi
GoI_counts_low = ddply(Input2,.(Pathway_lower2, GoI_higher_rank, Sister_taxa, Sister_higher_rank), summarize, GoI_Count = sum(Counts))
#only keep eukaryotes as group of interest
GoI_Eukcounts_low = GoI_counts_low[GoI_counts_low$GoI_higher_rank == 'Eukaryota',]
#remove self hits
GoI_Eukcounts2_low = GoI_Eukcounts_low[GoI_Eukcounts_low$Sister_higher_rank != 'Eukaryota',]
#calculate the total counts per category
TotalCountsperCat_low = ddply(GoI_Eukcounts2_low,.(Pathway_lower2), summarize, TotalCount = sum(GoI_Count))
#add total counts to our df
GoI_Eukcounts_low_norm = merge(GoI_Eukcounts2_low, TotalCountsperCat_low, by = "Pathway_lower2", all.x = T)
GoI_Eukcounts_low_norm$norm = GoI_Eukcounts_low_norm$GoI_Count/GoI_Eukcounts_low_norm$TotalCount*100
#control total counts
Total_PerCat_low<- unique(GoI_Eukcounts_low_norm[,c("Pathway_lower2", "TotalCount")]) %>%
group_by(Pathway_lower2) %>%
summarise(total=sum(TotalCount))
#extract data for Asgard and Alpha: 134,619
Asg_Alpha_subset = Input2_euks %>% filter( Sister_taxa=="Asgard" | Sister_taxa=="Alpha")
#count the total nr of COGs/pathway for each group
Asg_Alpha_counts <- unique(Asg_Alpha_subset[,c("MarkerID", "Pathway_desc", "Sister_taxa")]) %>%
group_by(Pathway_desc,Sister_taxa) %>%
summarise(sum_drv = n())
#print
#write.table(Asg_Alpha_counts, "2_Output/Asg_Alpha_LECA_counts.txt", sep = "\t", row.names = FALSE)
#list pathways with at least 10 hits
Total_PerCat[Total_PerCat$total>=10]
#list pathways with at least 10 hits
Total_PerCat[Total_PerCat$total=10]
#list pathways with at least 10 hits
Total_PerCat[Total_PerCat$total==10]
#list pathways with at least 10 hits
Total_PerCat[Total_PerCat$total==10,]
#list pathways with at least 10 hits
Total_PerCat[Total_PerCat$total>=10,]
#list pathways with at least 10 hits
Total_PerCat[Total_PerCat$total>=10,]$Pathway_desc
#list pathways with at least 10 hits
pathways_to_plot <- Total_PerCat[Total_PerCat$total>=10,]$Pathway_desc
#subset our table
GoI_Eukcounts_norm_10 <- GoI_Eukcounts_norm[GoI_Eukcounts_norm %in% pathways_to_plot, ]
head(GoI_Eukcounts_norm_10)
#subset our table
GoI_Eukcounts_norm_10 <- GoI_Eukcounts_norm[GoI_Eukcounts_norm$Pathway_desc %in% pathways_to_plot, ]
head(GoI_Eukcounts_norm_10)
unique(GoI_Eukcounts_norm_10$Pathway_desc)
pathways_to_plot
length(unique(GoI_Eukcounts_norm$Pathway_desc))
length(unique(GoI_Eukcounts_norm_10$Pathway_desc))
length(pathways_to_plot)
GoI_Eukcounts_norm_10$Pathway_desc
length(unique(GoI_Eukcounts_norm$Pathway_desc))
length(unique(GoI_Eukcounts_norm_10$Pathway_desc))
#list pathways with at least 10 hits
pathways_to_plot <- Total_PerCat[Total_PerCat$total>=10,]$Pathway_desc
length(pathways_to_plot)
#subset our table
GoI_Eukcounts_norm_10 <- GoI_Eukcounts_norm[GoI_Eukcounts_norm$Pathway_desc %in% pathways_to_plot, ]
length(unique(GoI_Eukcounts_norm$Pathway_desc))
length(unique(GoI_Eukcounts_norm_10$Pathway_desc))
#subset list
v <- intersect(SisterTaxa_order,GoI_Eukcounts_norm_10$Sister_taxa)
GoI_Eukcounts_norm_10$Sister_taxa2 <-  factor(GoI_Eukcounts_norm_10$Sister_taxa, levels = rev(v ))
GoI_Eukcounts_norm_10$Sister_higher_rank2 <-  factor(GoI_Eukcounts_norm_10$Sister_higher_rank, levels = c("Archaea" ,  "Asgard", "Alphaproteobacteria", "Gammaproteobacteria","Campylobacterota", "Cyanobacteria", "Desulfobacterota","Myxococcota", "Chlamydiota", "Bacteria"))
GoI_Eukcounts_low_norm$Sister_taxa2 <-  factor(GoI_Eukcounts_low_norm$Sister_taxa, levels = rev(SisterTaxa_order))
GoI_Eukcounts_low_norm$Sister_higher_rank2 <-  factor(GoI_Eukcounts_low_norm$Sister_higher_rank, levels = c("Archaea" ,  "Asgard", "Alphaproteobacteria", "Gammaproteobacteria","Campylobacterota", "Cyanobacteria", "Desulfobacterota","Myxococcota", "Chlamydiota", "Bacteria"))
#get mapping file
color_mapping = unique(taxa_mapping[,c("Group_of_interest","Hexcode" )])
#add colors to the sister taxa
GoI_Eukcounts_norm_col = merge(GoI_Eukcounts_norm_10, color_mapping, by.x = "Sister_taxa2", by.y = "Group_of_interest", all.x = T)
GoI_Eukcounts_low_norm_col = merge(GoI_Eukcounts_low_norm, color_mapping, by.x = "Sister_taxa2", by.y = "Group_of_interest", all.x = T)
#reorder colored df
GoI_Eukcounts_norm_col = GoI_Eukcounts_norm_col[order(GoI_Eukcounts_norm_col$Sister_taxa2),]
GoI_Eukcounts_low_norm_col = GoI_Eukcounts_low_norm_col[order(GoI_Eukcounts_low_norm_col$Sister_taxa2),]
#make a string of colors
color_string = as.character(unique(GoI_Eukcounts_norm_col[,c("Sister_taxa2", "Hexcode")])$Hexcode)
color_string_low = as.character(unique(GoI_Eukcounts_low_norm_col[,c("Sister_taxa2", "Hexcode")])$Hexcode)
#reorder data
GoI_Eukcounts_norm_col2 = GoI_Eukcounts_norm_col[order(GoI_Eukcounts_norm_col$Sister_higher_rank2),]
color_for_plotting = unique(GoI_Eukcounts_norm_col2[,c("Sister_higher_rank2", "Hexcode")])
color_string2 = as.character(unique(color_for_plotting[,c("Sister_higher_rank2", "Hexcode")])$Hexcode)
legend <-
ggplot(color_for_plotting, aes(Sister_higher_rank2, fill = Sister_higher_rank2 )) +
geom_bar() +
coord_flip() +
scale_fill_manual(values = color_string2) +
#scale_x_continuous(limits = c(0.9,1.1)) +
theme(legend.position = "none",
panel.grid = element_blank(),
axis.title = element_blank(),
axis.text.x =  element_blank(),
axis.ticks = element_blank(),
panel.background = element_blank()) +
theme(aspect.ratio=10)
legend
bargraph <-
ggplot(GoI_Eukcounts_norm_col, aes(x=norm, y = Pathway_desc , fill = Sister_taxa2)) +
geom_bar(stat = "identity", colour = "black", size=0.01) + #colour = "black", size=0.01, #5D6D7E
scale_fill_manual(values = color_string) +
scale_x_continuous(name = "Occurence (%)", expand = c(0, 0), limits = c(0,110)) +
geom_text(data=Total_PerCat ,aes(y=Pathway_desc,x=total,label=total,fill=NULL), x = 101, size = 3, vjust = 0, hjust = 0) +
coord_cartesian(xlim = c(0, 110), clip = 'off')  + # This focuses the x-axis on the range of interest
theme(plot.margin = unit(c(1,3,1,1), "lines")) + #widen the margins
#theme_bw() +
theme(legend.position = "none") +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
axis.title.y = element_blank())
bargraph
GoI_Eukcounts_norm_col
unique(GoI_Eukcounts_norm_col$Pathway_desc)
#subset total counts
Total_PerCat_10 <- Total_PerCat[Total_PerCat$Pathway_desc %in% pathways_to_plot, ]
Total_PerCat_10
bargraph <-
ggplot(GoI_Eukcounts_norm_col, aes(x=norm, y = Pathway_desc , fill = Sister_taxa2)) +
geom_bar(stat = "identity", colour = "black", size=0.01) + #colour = "black", size=0.01, #5D6D7E
scale_fill_manual(values = color_string) +
scale_x_continuous(name = "Occurence (%)", expand = c(0, 0), limits = c(0,110)) +
geom_text(data=Total_PerCat_10 ,aes(y=Pathway_desc,x=total,label=total,fill=NULL), x = 101, size = 3, vjust = 0, hjust = 0) +
coord_cartesian(xlim = c(0, 110), clip = 'off')  + # This focuses the x-axis on the range of interest
theme(plot.margin = unit(c(1,3,1,1), "lines")) + #widen the margins
#theme_bw() +
theme(legend.position = "none") +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
axis.title.y = element_blank())
bargraph
p <- ggplotly(bargraph)
p2 <- subplot(bargraph, legend, nrows = 1, margin = 0.1, widths =  c(0.8, 0.2))
htmlwidgets::saveWidget(as_widget(p2), "2_Output/Euk_sisters_level1.html")
pdf("2_Output/Euk_sisters_level1_10.pdf", paper="special", family="sans",width=12, height=8)
combined_plot <-
ggarrange(bargraph, legend,
ncol = 2, nrow = 1,
widths = c(1, 0.2),
heights = c(1,0,2))
annotate_figure(combined_plot, top = text_grob("Eukaryotic sisterhood relationships",
color = "black", face = "bold", size = 14, hjust = 0, x = 0),
fig.lab.pos = "top.left")
dev.off()
reticulate::repl_python()
reticulate::repl_python()
reticulate::repl_python()
reticulate::repl_python()
reticulate::repl_python()
reticulate::repl_python()
